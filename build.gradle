plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.12'
    id 'org.beryx.jlink' version '2.25.0'
    id 'com.vanniktech.maven.publish' version '0.19.0'
}

mainClassName = "org.scenicview.scenicview/org.scenicview.ScenicView"
group = 'io.github.palexdev'
version = '17.0.2'

defaultTasks 'install'

repositories {
    mavenCentral()
}

configurations {
    jdk
    binTray
}

/*sourceSets {
    main {
        compileClasspath += configurations.jdk
    }
}*/

javafx {
    version = '18'
    modules = ['javafx.controls', 'javafx.fxml']
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.scenicview.ScenicView',            /* Used for standalone Scenic View */
                'Agent-Class': 'org.fxconnector.remote.RuntimeAttach',/* But the standalone Scenic View starts up this agent when in runtime attach mode */
                'Premain-Class': 'org.scenicview.ScenicView',          /* Alternatively, this will be called if Scenic View is started as an agent */
                'Automatic-Module-Name': 'org.scenicview.scenicview'
        )
    }
    archiveName = 'scenicview.jar'
}

run {
    dependsOn jar
}

javadoc {
    excludes = ['**/*.html', 'META-INF/**']

    options.use = true
    options.splitIndex = true
    options.encoding = 'UTF-8'
    options.author = true
    options.version = true
    options.windowTitle = "$project.name $project.version API"
    options.docTitle = "$project.name $project.version API"
    options.links = ['https://docs.oracle.com/en/java/javase/11/docs/api',
                     'https://openjfx.io/javadoc/18']
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task sourcesJarBuild(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJarBuild
    archives jar
}

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'scenicView'
    }
    imageDir = file("${buildDir}/scenicview")
    imageZip = file("${buildDir}/dist/scenicview-${platform}.zip")
}

tasks.jlink.doLast {
    // Copy scenicView.jar to lib, it is required as loading Agent
    copy {
        from "${buildDir}/libs/scenicview.jar"
        into "${buildDir}/scenicview/lib"
    }
}

allprojects {
    plugins.withId("com.vanniktech.maven.publish") {
        mavenPublish {
            sonatypeHost = "S01"
        }
    }
}